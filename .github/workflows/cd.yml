# =====================================================
# Flarum CI/CD Pipeline - Continuous Deployment
# Muh Dzaky Musaddaq - Docker/Deployment Engineer
# =====================================================

name: Continuous Deployment

# Trigger CD pipeline after successful CI
on:
  workflow_run:
    workflows: ["Continuous Integration & Testing"]
    types: [completed]
    branches: [main]
  workflow_dispatch: # Manual trigger

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================================
  # Job 1: Build Docker Image
  # =====================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Docker Environment File
      run: |
        echo "🔧 Creating Docker environment configuration..."
        cat > .env.docker << EOF
        APP_ENV=production
        APP_DEBUG=false
        APP_URL=http://localhost
        
        DB_CONNECTION=mysql
        DB_HOST=mysql
        DB_PORT=3306
        DB_DATABASE=flarum
        DB_USERNAME=flarum_user
        DB_PASSWORD=flarum_password
        
        CACHE_DRIVER=redis
        SESSION_DRIVER=redis
        REDIS_HOST=redis
        REDIS_PORT=6379
        
        MAIL_DRIVER=smtp
        MAIL_HOST=localhost
        MAIL_PORT=1025
        EOF
        echo "✅ Docker environment file created"

    - name: Create Required Docker Directories
      run: |
        echo "📁 Creating Docker configuration directories..."
        mkdir -p docker/nginx
        mkdir -p docker/php
        mkdir -p docker/mysql/init
        mkdir -p docker/mysql/conf
        echo "✅ Directories created"

    - name: Create Nginx Configuration
      run: |
        echo "🌐 Creating Nginx configuration..."
        cat > docker/nginx/nginx.conf << 'EOF'
        user www-data;
        worker_processes auto;
        pid /run/nginx.pid;
        
        events {
            worker_connections 1024;
            use epoll;
            multi_accept on;
        }
        
        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 65;
            types_hash_max_size 2048;
            
            include /etc/nginx/conf.d/*.conf;
        }
        EOF
        echo "✅ Nginx main configuration created"

    - name: Create PHP Configuration
      run: |
        echo "🐘 Creating PHP configuration..."
        cat > docker/php/php.ini << 'EOF'
        [PHP]
        memory_limit = 256M
        max_execution_time = 60
        max_input_time = 60
        upload_max_filesize = 20M
        post_max_size = 20M
        max_file_uploads = 20
        
        [Date]
        date.timezone = UTC
        
        [Session]
        session.gc_maxlifetime = 1440
        session.cookie_lifetime = 0
        session.cookie_secure = 0
        session.cookie_httponly = 1
        
        [opcache]
        opcache.enable = 1
        opcache.memory_consumption = 128
        opcache.max_accelerated_files = 10000
        opcache.revalidate_freq = 2
        opcache.save_comments = 1
        EOF
        
        cat > docker/php/opcache.ini << 'EOF'
        [opcache]
        opcache.enable=1
        opcache.memory_consumption=128
        opcache.interned_strings_buffer=8
        opcache.max_accelerated_files=10000
        opcache.revalidate_freq=2
        opcache.fast_shutdown=1
        opcache.save_comments=1
        EOF
        echo "✅ PHP configuration created"

    - name: Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate Build Summary
      run: |
        echo "## 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Build Status:" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Build**: SUCCESS" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Push**: SUCCESS" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Multi-platform**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

  # =====================================================
  # Job 2: Deploy to Development
  # =====================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: development
      url: http://localhost:8080
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Development Environment
      run: |
        echo "🔧 Setting up development environment..."
        
        # Create environment file for development
        cat > .env.development << EOF
        COMPOSE_PROJECT_NAME=flarum_dev
        DOCKER_APP_PORT=8080
        DOCKER_DB_PORT=3307
        DOCKER_REDIS_PORT=6380
        DOCKER_ADMINER_PORT=8081
        
        APP_ENV=development
        APP_DEBUG=true
        APP_URL=http://localhost:8080
        
        DOCKER_DB_ROOT_PASSWORD=dev_root_password
        DOCKER_DB_DATABASE=flarum_dev
        DOCKER_DB_USER=flarum_dev_user
        DOCKER_DB_PASSWORD=flarum_dev_password
        
        REDIS_PASSWORD=dev_redis_password
        EOF
        
        echo "✅ Development environment configured"

    - name: Deploy with Docker Compose
      run: |
        echo "🚀 Deploying to development environment..."
        
        # Use the built image from registry
        export FLARUM_IMAGE="${{ needs.build.outputs.image-tag }}"
        
        # Start development services
        docker-compose -f docker/docker-compose.yml --env-file .env.development up -d --profile development
        
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        # Health check
        for i in {1..10}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Development deployment successful!"
            break
          fi
          echo "⏳ Attempt $i/10 - waiting for application..."
          sleep 10
        done

    - name: Run Deployment Tests
      run: |
        echo "🧪 Running deployment tests..."
        
        # Test application health
        curl -f http://localhost:8080/health
        
        # Test database connection
        docker-compose -f docker/docker-compose.yml exec -T mysql mysqladmin ping -h localhost
        
        # Test Redis connection
        docker-compose -f docker/docker-compose.yml exec -T redis redis-cli ping
        
        echo "✅ All deployment tests passed!"

    - name: Deployment Summary
      run: |
        echo "## 🚀 Development Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: http://localhost:8080" >> $GITHUB_STEP_SUMMARY
        echo "- **Database Admin**: http://localhost:8081" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Service Status:" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Flarum App**: Running on port 8080" >> $GITHUB_STEP_SUMMARY
        echo "✅ **MySQL**: Running on port 3307" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Redis**: Running on port 6380" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Adminer**: Running on port 8081" >> $GITHUB_STEP_SUMMARY

  # =====================================================
  # Job 3: Security Scan
  # =====================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =====================================================
  # Job 4: Deployment Status Summary
  # =====================================================
  deployment-summary:
    name: Deployment Status Summary
    runs-on: ubuntu-latest
    needs: [build, deploy-dev, security-scan]
    if: always()
    
    steps:
    - name: Generate Deployment Report
      run: |
        echo "## 🎯 Continuous Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Pipeline Status:" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Development Deployment**: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build.result }}" = "success" ] && 
           [ "${{ needs.deploy-dev.result }}" = "success" ]; then
          echo "✅ **Overall Status**: DEPLOYMENT SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Flarum application deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker image built and pushed**" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Development environment ready**" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Security scan completed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Overall Status**: DEPLOYMENT FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Please check individual job logs for details" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Success Notification
      if: needs.build.result == 'success' && needs.deploy-dev.result == 'success'
      run: |
        echo "🎉 SUCCESS! Continuous Deployment completed!"
        echo ""
        echo "✅ Docker Image: Built and pushed to registry"
        echo "✅ Development Environment: Deployed and tested"
        echo "✅ Health Checks: All services healthy"
        echo "✅ Security Scan: Vulnerability assessment completed"
        echo ""
        echo "🚀 Flarum CI/CD Pipeline: FULLY OPERATIONAL!"
        echo "👥 Ready for team collaboration and production deployment!"